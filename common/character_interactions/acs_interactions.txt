debug_spawn_hecate_interaction = {
	use_diplomatic_range = no
	category = interaction_debug_main
	ignores_pending_interaction_block = yes
	icon = prison
	interface_priority = 1000
	common_interaction = yes

	is_shown = {
		debug_only = yes
		scope:recipient = {
			is_imprisoned = no
		}
		NOT = {
			scope:recipient = scope:actor
		}
	}

	on_accept = {
		scope:recipient = {
            random_province = {
				save_scope_as = acs_hecate_province
			}
            while = {
			    count = 60
                spawn_army = {
                    name = "Hecate"
                    men_at_arms = {
                        type = risen_dead
                        stacks = 10
                    }
                    location = scope:acs_hecate_province
                    origin = scope:acs_hecate_province
                    inheritable = yes
                    uses_supply = no
                }
            }
			
		}
	}
	auto_accept = yes
}

debug_spawn_rotter_sita_interaction = {
	use_diplomatic_range = no
	category = interaction_debug_main
	ignores_pending_interaction_block = yes
	icon = prison
	interface_priority = 1000
	common_interaction = yes

	is_shown = {
		scope:recipient = {
			is_imprisoned = no
		}
		scope:recipient = scope:actor
		scope:actor = { is_ai = no }
	}

	on_accept = {
		scope:recipient = {
            while = {
			    count = 10
                create_character = {
					employer = scope:recipient
					template = rotten_sita_template
				}
            }
			
		}
	}
	auto_accept = yes
}

debug_mark_sennatha_bride_interaction = {
	use_diplomatic_range = yes
	category = interaction_debug_main
	ignores_pending_interaction_block = yes
	icon = prison
	interface_priority = 1000
	common_interaction = yes

	is_shown = {
		scope:recipient = {
			is_imprisoned = no
			is_female = yes
		}
		NOT = { scope:actor = scope:recipient }
		scope:recipient = { is_adult = yes }
		scope:actor = { is_ai = no }
	}

	on_accept = {
		scope:recipient = {
            add_trait = sennatha_bride
			
		}
	}
	auto_accept = yes
}

debug_mark_sennatha_groom_interaction = {
	use_diplomatic_range = yes
	category = interaction_debug_main
	ignores_pending_interaction_block = yes
	icon = prison
	interface_priority = 1000
	common_interaction = yes

	is_shown = {
		scope:recipient = {
			is_imprisoned = no
			is_female = no
		}
		NOT = { scope:actor = scope:recipient }
		scope:recipient = { is_adult = yes }
		scope:actor = { is_ai = no }
	}

	on_accept = {
		scope:recipient = {
            add_trait = sennatha_groom
			
		}
	}
	auto_accept = yes
}

debug_pika_arrange_marriage_inter = {
	use_diplomatic_range = no
	category = interaction_debug_main
	ignores_pending_interaction_block = yes
	icon = prison
	interface_priority = 1001
	common_interaction = yes
	auto_accept = yes
	
	special_interaction = arrange_marriage_interaction
	interface = marriage
	
	redirect = {
		scope:actor = {
			if = {
				limit = {
					exists = matchmaker
					NOT = { this = matchmaker }
				}
				save_scope_as = secondary_actor
				matchmaker = {
					save_scope_as = actor
				}
			}
			if = {
				limit = {
					is_betrothed = yes
					betrothed = scope:recipient
				}

				save_scope_as = secondary_actor
			}
		}

		scope:recipient = {
			if = {
				limit = {
					is_betrothed = yes
					betrothed.matchmaker = scope:actor
					is_adult = yes
					betrothed = {
						is_adult = yes
					}
				}

				save_scope_as = secondary_recipient
				matchmaker = {
					save_scope_as = recipient
				}
				betrothed = {
					save_scope_as = secondary_actor
				}
			}
			if = {
				limit = {
					exists = matchmaker
					NOT = { this = matchmaker }
				}
				save_scope_as = secondary_recipient
				matchmaker = {
					save_scope_as = recipient
				}
			}
		}
	}

	populate_actor_list = {
		scope:actor = {
			add_to_list = characters
			every_courtier = {
				limit = {
					NOT = { is_in_list = characters }
				}
				add_to_list = characters
			}
			every_child = {
				limit = {
					NOT = { is_in_list = characters }
				}
				add_to_list = characters
			}
		}
	}

	populate_recipient_list = {
		scope:recipient = {
			add_to_list = characters
			every_courtier = {
				limit = {
					NOT = { is_in_list = characters }
				}
				add_to_list = characters
			}
			every_child = {
				limit = {
					NOT = { is_in_list = characters }
				}
				add_to_list = characters
			}
		}
	}

	is_shown = {
		scope:actor = {
			is_ai = no
		}
		
		#If you're interacting with someone who isn't their own matchmaker, only show the interaction if they can get married. (If someone isn't their own matchmaker, they will be set as secondary_recipient by code and their matchmaker becomes recipient)
		trigger_if = {
			limit = { exists = scope:secondary_recipient }
			scope:secondary_recipient = {
				OR = {
					marriage_interaction_can_be_picked_trigger = yes #Can marry anyone
					AND = {
						ready_to_marry_betrothed_trigger = yes
						OR = {
							betrothed = scope:secondary_actor
							trigger_if = {
								limit = { exists = betrothed.liege }
								betrothed.liege = scope:actor
							}
						}
					}
				}
			}
		}
	}
	
	is_valid_showing_failures_only = {
	}
	
	can_be_picked = {
	}

	has_valid_target_showing_failures_only = {
	}
	
	on_accept = {
		marriage_interaction_on_accept_effect = yes		
	}

	on_decline = {
	}

	
	auto_accept = yes
	
	ai_accept = {
		base = 100
	}
	
	on_send = {
	}
	
	send_option = {
		flag = matrilineal
		localization = MATRILINEAL_OFFER
		current_description = {
			triggered_desc = {
				trigger = {
					exists = scope:secondary_actor
					scope:secondary_actor = {
						betrothed = scope:secondary_recipient
						matrilinear_betrothal = yes
					}
				}
				desc = "MATRILINEAL_OFFER_BETROTHAL_INFO"
			}
		}
		can_be_changed = {
		}
		starts_enabled = {
			trigger_if = {
				limit = {
					exists = scope:secondary_actor
					scope:secondary_actor = {
						betrothed = scope:secondary_recipient
					}
				}
				scope:secondary_actor = {
					matrilinear_betrothal = yes
				}
			}
		}
	}
	
	send_option = {
		is_shown = {
			scope:secondary_actor = {
				NOT = {
					betrothed = scope:secondary_recipient
				}
			}
		}
		flag = marriage_hook
		localization = MARRIAGE_HOOK
	}
	
	send_options_exclusive = no
	
	show_effects_in_notification = no
	greeting = positive
}

debug_warframe_armor_interaction = {
	use_diplomatic_range = no
	category = interaction_debug_main
	ignores_pending_interaction_block = yes
	icon = prison
	interface_priority = 1002
	common_interaction = no

	is_shown = {
		debug_only = yes
		scope:recipient = {
			is_imprisoned = no
		}
		NOT = {
			scope:recipient = scope:actor
		}
	}

	on_accept = {
		scope:recipient = {
			create_artifact_warframe_armor_effect = { OWNER = this }
			add_character_flag = has_warframe_armor
		}
	}
	auto_accept = yes
}
